parameters:
  - name: environmentType
    type: string
    values:
      - Dev
      - QA
      - Prod

  - name: slotName
    type: string
    default: production

  - name: regions
    type: object
    default:
      - East

  - name: serviceConnection
    type: string

  - name: manualApproval
    type: boolean
    default: false

jobs:
- ${{ if parameters.manualApproval }}:
  - job: jobManualApproval
    displayName: Manual Approval
    pool: server
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: 1
        inputs:
          instructions: |
            ✅ Acceptance criteria is met
            ✅ Regressions pass
          onTimeout: 'reject'

- ${{ each region in parameters.regions }}:
    - deployment: jobDeploy${{ region }}
      displayName: Deploy ${{ region }}
      environment: ${{ parameters.environmentType }}
      ${{ if parameters.manualApproval }}:
        dependsOn: jobManualApproval
      pool:
        vmImage: ubuntu-latest
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureWebApp@1
                name: taskDeployAppService
                displayName: Azure Deploy
                inputs:
                  azureSubscription: ${{ parameters.serviceConnection }}
                  resourceGroupName: kmx-${{ parameters.environmentType }}-${{ region }}-$(appName)
                  appType: webAppLinux
                  appName: $(appName)-${{ parameters.environmentType }}-${{ region }}
                  runtimeStack: 'NODE|14-lts'
                  package: $(Pipeline.Workspace)/$(buildPackageName)
                  startUpCommand: ''
                  slotName: ${{ parameters.slotName }}
                  appSettings: -CI_BUILD_NUMBER $(ciBuildNumber) -CYPRESS_INSTALL_BINARY "0" -SCM_DO_BUILD_DURING_DEPLOYMENT "true" -WEBSITE_ENABLE_SYNC_UPDATE_SITE true -WEBSITE_SWAP_WARMUP_PING_PATH "/api/health" -WEBSITE_WARMUP_PATH "/health" -WEBSITE_SWAP_WARMUP_PING_STATUSES "200, 202"

              - bash: |
                  echo "AppServiceApplicationUrl is $(taskDeployAppService.AppServiceApplicationUrl)"
                  echo "##vso[task.setvariable variable=deployedAppUrl;isOutput=true;]$(taskDeployAppService.AppServiceApplicationUrl)"
                  echo "##vso[task.setvariable variable=ciBuildNumber;isOutput=true;]$(taskDeployAppService.ciBuildNumber)"
                name: setDeploymentResults
                displayName: Set deployedAppUrl

              - template: smokeTest.yml
                parameters:
                  appUrl: $(taskDeployAppService.AppServiceApplicationUrl)

#              - task: PowerShell@2
#                displayName: 'Wait for endpoint to respond'
#                timeoutInMinutes: 5
#                env:
#                  ciBuildNumber: $(ciBuildNumber)
#                  appUrl: $(taskDeployAppService.AppServiceApplicationUrl)/api/system/health
#                inputs:
#                  targetType: 'inline'
#                  script: |
#                    write-host "ping: " $env:appUrl
#                    Do {
#                      try {
#                        $response = Invoke-RestMethod -Uri $env:appUrl -TimeoutSec 5
#                        write-host "Expected:" $env:ciBuildNumber -> Received: $response.buildNumber
#                      } catch { write-host "No Response" -ForegroundColor Yellow }
#                      Start-Sleep -Seconds 2
#                    }
#                    while (-not $response -or $response.buildNumber -ne $env:ciBuildNumber)
#                    write-host "App deployed, hooray!" -ForegroundColor Green
#                  pwsh: true

              - script: env | sort
                displayName: Pipeline Environment

    - job: jobDeployValidation${{ region }}
      displayName: E2E Tests ${{ region }}
      dependsOn: jobDeploy${{ region }}
      condition: ${{ eq(variables.skipE2eTests, false) }}
      variables:
        deployedAppUrl: $[ dependencies.jobDeploy${{ region }}.outputs['jobDeploy${{ region }}.setDeploymentResults.deployedAppUrl'] ]
      steps:
        - script: env | sort
          displayName: Pipeline Environment

        - template: npmInstall.yml

        - script: npm run test:e2e -- --config baseUrl=$(deployedAppUrl) -- --env $(ciBuildNumber)
          displayName: Cypress
